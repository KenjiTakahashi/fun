/**********************
 * Top level Fun code *
 **********************/
FunCode =
 FunStatement*

FunStatement
 = _ xml:XML _T
   { return xml; }
 / _ declaration:DeclarationStatement _T
   { return declaration; }
 / _ ifElse:IfElse _T
   { return ifElse }
 / _ value:InlineValue _T
   { return {type:'INLINE_VALUE', value: value}; }
 / _ reference:Reference _T
   { return reference; }
 / Comment
   { return [] }

Comment "Comment"
 = _ '//' [^\n]*



/***********
 * Utility *
 ***********/
Name "Name" = first:alpha rest:alphanum*
    { return first + rest.join('') }

alpha "Alpha character" = [a-zA-Z_]
alphanum "Alpha numeric character" = [a-zA-Z0-9_]

_ "Whitespace" = [\t\f\n ]*
_T "Possibly terminal whitespace" = [\t\f\n ]* EOF / _
EOF = !.



/***************************************
 * Values, declarations and references *
 ***************************************/
InlineValue "Inline value"
 = String
 / Number

String "String"
 = '"' value:[^"\n]+ '"'
   { return {type:'STRING', value:value.join('')}; }
 / "'" value:[^'\n]+ "'"
   { return {type:'STRING', value:value.join('')}; }

Number "Number"
 = value:[0-9]+
   { return {type:'NUMBER', value:parseInt(value.join(''))}; }

DeclarationStatement "Declaration statement"
 = 'let' _ name:Name _ '=' _ value:Declaration 
   { return {type:'DECLARATION', name:name, value:value}; }

Declaration "Declaration"
 = Handler
 / String
 / Number
 / JSON

Reference "Reference"
 = InlineValue
 / JSON
 / "Local." name:Name
   { return {type:'REFERENCE', referenceType:'LOCAL', value:name}; }
 / "Global." name:Name
   { return {type:'REFERENCE', referenceType:'GLOBAL', value:name}; }
 / name:Name
   { return {type:'REFERENCE', referenceType:'ALIAS', name:name}; }



/****************
 * XML literals *
 ****************/
XML "XML"
 = _ tag:XMLSelfClosing
   { return {type:'XML_NODE', name:tag.name, attributes:tag.attributes, content:[]}; }
 / _ openTag:XMLOpen _ content:FunCode _ closeTag:XMLClose
   { return {type:'XML_NODE', name:openTag.name, attributes:openTag.attributes, content:content}; }

XMLOpen	"XML open tag"
 = '<' _ tagName:Name _ attributes:XMLAttribute* '>'
   { return {name:tagName, attributes:attributes}; }

XMLClose "XML close tag"
 = '</' tagName:Name '>'
   { return {name:tagName}; }

XMLSelfClosing "Self closing XML tag"
 = '<' tagName:Name _ attributes:XMLAttribute* '/>'
   { return {name:tagName, attributes:attributes}; }

XMLAttribute "XML node attribute"
 = name:Name "=" value:Reference _
   { return {type: 'XML_ATTRIBUTE', name:name, value:value}; }



/*****************
 * JSON literals *
 *****************/
JSON "JSON"
 = "{" _ values:JSONContent _ "}"
   { return {type:'JSON', content:values}; }
 / "{" _ "}"
   { return {type:'JSON', content:null}; }

JSONContent
 = kvp:JSONPair _ "," _ json:JSONContent
   { json[kvp.key]=kvp.value; return json; }
 / kvp:JSONPair
   { var json={}; json[kvp.key]=kvp.value; return json; }

JSONPair
 = key:Name _ ":" _ value:Reference
   { return {key:key,value:value}; }



/***************************************************
 * Handlers and state changing mutation statements *
 ***************************************************/
Handler "Handler"
 = 'handler' _ '(' _ args:ArgumentList _ ')' _ '{' _ code:MutationStatement* _ '}'
   { return {type:'HANDLER', args: args, code: code}; }

ArgumentList
 = name:Name _ ',' _ args:ArgumentList
   { return [name].concat(args) }
 / name:Name
   { return [name] }
 / _
   { return [] }

MutationStatement
 = 'set' _ target:Reference _ '=' _ source:MutationValue _T
   { return {type:'MUTATION', target:target, source:source}; }

MutationValue
 = Reference
 / InlineValue



/*************************************
 * If/Else branches and conditionals *
 *************************************/
IfElse "If/Else statement"
 = 'if' _ '(' _ cond:Condition _ ')' _ '{' ifTrue:FunCode '}' _ 'else' _ '{' ifFalse:FunCode '}'
   { return {type:'IF_ELSE', condition:cond, ifTrue:ifTrue, ifFalse:ifFalse}; }

Condition
 = left:Reference _ comparison:Comparison _ right:Reference
   { return {type:'CONDITION', left:left, right:right, comparison:comparison }; }

Comparison
 = '>='
 / '>'
 / '<='
 / '<'
 / '=='


