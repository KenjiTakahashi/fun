ometa FunParser <: XMLParser {
	FunTop		= FunCode:code _ end									-> ['FunBegin', code, 'FunEnd'],
	
	FunCode		= FunStmnt*:stmnts										-> stmnts,
	
	FunStmnt	= FunIf:ifBlock											-> ifBlock
				| FunFor:forBlock										-> forBlock
				| FunValue:value										-> value,
	
	FunIf		= "if" "(" FunCond:cond ")" "{" FunCode:ifCode "}"		-> ['FunIf', cond, ifCode]
				| "if" "(" FunCond:cond ")" "{" FunCode:ifCode "}"
					"else" "{" FunCode:elseCode "}"						-> ['FunIfElse', cond, ifCode, elseCode],
	
	FunCond		= FunValue:val1 "==" FunValue:val2						-> ['FunCondEq', val1, val2]
				| FunValue:val											-> ['FunCondBool', val],

	FunFor		= "for" "(" string:varName "over" FunProp:prop ")"
					"{" FunCode:forCode "}"								-> ['FunFor', varName, prop, forCode],
	
	// matches a list of properties and string, seperated by ","
	// e.g. "Welcome ", user.name ". How are you?"
	// TODO this recursion could be one better
	FunValue	= FunString:str "," FunValue:more						-> [str].concat(more)
				| FunProp:prop "," FunValue:more						-> [prop].concat(more)
				| FunString:str											-> [str]
				| _ FunProp:prop _										-> [prop]
				| XMLNode:xmlNode										-> xmlNode,
	
	FunString	= token('"') az09*:letters token('"')					-> ['FunString', letters.join('')],
	
	FunProp		= az09+:propName										-> ['FunProp', propName.join('')]
	
	// XMLContent	// Override, can include FunProp (FunValue?)
	// XMLAttr		// Override, attribute value can be FunProp (FunValue?)
}

ometa FunTranslator <: XMLTranslator {
	FunTop		= 'FunBegin' [FunStmnt*:stmnts] 'FunEnd'				-> stmnts.join("\n"),
	
	FunStmnt	= ['FunIf' :cond :ifCode]								-> 'FunIf'
				| ['FunIfElse' :cond :ifCode :elseCode]					-> 'FunIfElse'
				| ['FunFor' :varName :prop :forCode]					-> 'FunFor'
				| [FunValues:values]									-> ('FunValues: ' + values),
	
	FunValues	= FunValue:val1 FunValue:val2							-> (val1 + val2)
				| FunValue:val											-> val,
	
	FunValue	= ['FunProp' :propName]									-> ('FunProp:' + propName)
				| ['FunString' :str]									-> ('FunString:' + str)
}