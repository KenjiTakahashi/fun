// parser and simple interpreter combo
 
ometa CalcParser {
  digit    = ^digit:d                 -> d.digitValue(),
  number   = number:n digit:d         -> (n * 10 + d)
           | digit,
  addExpr  = addExpr:x '+' mulExpr:y  -> ['add', x, y]
           | addExpr:x '-' mulExpr:y  -> ['sub', x, y]
           | mulExpr,
  mulExpr  = mulExpr:x '*' primExpr:y -> ['mul', x, y]
           | mulExpr:x '/' primExpr:y -> ['div', x, y]
           | primExpr,
  primExpr = '(' expr:x ')'           -> x
           | number:n                 -> ['num', n],
  expr     = addExpr
}
 
ometa CalcInterpreter {
  interp = ['num' anything:x]        -> x
         | ['add' interp:x interp:y] -> (x + y)
         | ['sub' interp:x interp:y] -> (x - y)
         | ['mul' interp:x interp:y] -> (x * y)
         | ['div' interp:x interp:y] -> (x / y)
}
 
ometa CalcCompiler {
  comp    = ['num' anything:x]    -> x.toString()
          | ['add' comp:x comp:y] -> ('(' + x + ' add ' + y + ')')
          | ['sub' comp:x comp:y] -> ('(' + x + ' minus ' + y + ')')
          | ['mul' comp:x comp:y] -> ('(' + x + ' multiply ' + y + ')')
          | ['div' comp:x comp:y] -> ('(' + x + ' divide ' + y + ')')
}
 

// CalcInterpreter.match(tree, 'interp')
// print(CalcCompiler.match(tree, 'comp'))