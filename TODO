TASKS

Get involved - complete a task :)

- "Write apps"
	1) write an app
	2) write another one
	3) tell the world about them

- "thefunlanguage.com"
	1) just put something up there
	2) run server in browser for demos
	3) in-browser editor for demos
	4) list engines
	5) technical docs

- "Composite statements"
	X 1) rename parseValueOrAlias to parseValue
	X 2) in parseValue, if parsed number, text or alias
		if next token is operator (e.g. "+")
			parseCompositeStatement(value, operator)
	X 3) <input data=Local.x /> "+" <input data=Local.y /> "=" Local.x + Local.y
	X 4) Grouped composite statements, e.g. (6 * (5 + 4))
	X 5) Allow for composite statements as if/else conditionals
	6) Allow for unary operators !, -, + at the beginning of conditional composite statements

- "Deferred values"
	X 1) Come up with a common way to wait on a series of values before executing a function of compiled code
	2) If all the values are static, don't bother creating a delayed function

- "Tag-based type inference"
	X 1) Tags with data should have the dataType attribute <input data=Local.x dataType="number" />
	2) Tags should have custom implementations, that declare what types of data they accept
	3) The data should infer its type of the dataType attribute, and should default to "text"

- "Template arguments"
	1) Pass in arguments to template invocations
		let aTemplate = template(item) { "Hello " item.name }
		let anotherTemplate = template(name) { "Hello " name }
		aTemplate(@1)
		aTemplate("world")

- "Handler arguments"
	1) Pass in arguments to handler invocations
		let removeFriend = handler(user, friend) {
			user.friends.remove(friend)
		}
		for (friend in user.friends) {
			<button>"remove"</button onclick=removeFriend(user, friend)>
		}

- "Aliased object literal styles"
	1) Allow for saying
		let aStyle = { display:'block' }
		<div style=aStyle />
	2) Enable merging object literals, e.g.
		let aStyle = { display:'block', color:'red' }
		let bStyle = aStyle + { font:'Helvetica', display:'inline' }

- "List/Range literals (and list comprehensions?)"
	See examples/for_loop_literal.fun
	1) Implement list literals (e.g. for (number in [1,2,3]) { ... })
	2) Implement ranges (e.g. for (number in [1..10]) { ... })
	3) Investigate list comprehension - are they useful for fun?

- "Unit testing"
	1) Figure out what unit testing framework to use
	2) unit test parser
	3) unit test resolver
	4) unit test compiler
	5) unit test fin client api
	6) unit tests for the persistence engine api(!)
	7) unit tests for the pubsub engine api(!)

- "Fun Engines"
	1) separate out the persistence and the storage engines from each other
	2) a mysqpl persistence engine
	3) a 0mq pubsub engine
	4) a couchdb persistence engine
	5) a couchdb pubsub engine (changes api)

- "Type-safe item creation"
	1) Whenever an item gets created, ensure that all item properties that are used elsewhere
		are properly initialized, and that no properties that are not used are initialized

BUGS

- "Already subscribed to item property doesn't show up after created"
	Add these lines to the top of chatrooms.fun and start with no data:
		let a = @1
		a.name
	Now create a new room. The room does not show up in the for loop, nor does it show up at the "a.name" hook

- "Relative file imports"
	file imports are relative to the process directory but should be relative to the file's directory
