#!/usr/bin/env node

var fs = require('fs'),
	sys = require('sys'),
	http = require('http'),
	path = require('path'),
	optimist = require('optimist'),
	fin = require('fin'),
	tokenizer = require('../lib/tokenizer'),
	parser = require('../lib/parser'),
	resolver = require('../lib/resolver'),
	compiler = require('../lib/compiler')

/* Commandline options
 *********************/
var argv = optimist.usage('Usage: $0 app.fun [--help --host=127.0.0.1 --port=8080 --engine=[development,redis]]').argv

// Variables
var sourceFile = argv._[0],
	port = argv.port || 8080,
	host = argv.host || '127.0.0.1',
	engineName = argv.engine || 'development'

if (argv.h || argv.help) {
	sys.puts(fs.readFileSync('./help.txt'))
} else {
	var engine = require('fin/engines/'+engineName)
	var server = http.createServer(function(req, res) {
		if (req.url == '/') {
			try {
				res.end(compileAppHTML())
			} catch(e) {
				res.end('ERROR ' + e.message)
			}
		}
	})
	server.listen(port, host)
	fin.mount(server, engine)
	console.log("running", sourceFile, "on", host, port)
}

function compileAppHTML() {
	return [
		'<!doctype html>',
		'<html>',
		'<head></head>',
		'<body>',
		'	<script src="/fin/orm.js"></script>',
		'	<script>',
			compileAppJS(),
		'	</script>',
		'</body>',
		'</html>'
	].join('\n')
}

function compileAppJS() {
	var tokens = tokenizer.tokenizeFile(sourceFile),
		ast = parser.parse(tokens),
		resolved = resolver.resolve(ast),
		compiledJS = compiler.compile(resolved.ast, resolved.modules, resolved.declarations),
		runtimeUtilJS = fs.readFileSync(__dirname + '/../lib/runtimeUtil.js')
	return runtimeUtilJS + "\n" + compiledJS
}
