#!/usr/bin/env node

var fs = require('fs'),
	util = require('util'),
	http = require('http'),
	path = require('path'),
	optimist = require('optimist'),
	map = require('std/map')

/* Commandline options
 *********************/
var commandline = optimist.usage('Usage: fun path/to/app.fun [--compile --host=127.0.0.1 --port=8080]'),
	argv = commandline.argv,
	file = path.join(process.cwd(), argv._[0])

if (argv.compile) {
	var htmlFile = loadCompiler().compileFile(file)
	util.puts(htmlFile)
	return process.exit(0)
}

if (!argv._[0]) {
	console.error(commandline.help())
	return process.exit(-1)
}

// Variables
var port = argv.port || 8080,
	host = argv.host || '127.0.0.1'

try {
	var stat = fs.statSync(file)
} catch(e) {
	console.error('Error:', e.message ? e.message : e.toString())
	return process.exit(-1)
}

if (!stat.isFile()) {
	console.error('Error:', file, 'is not a file.')
	return process.exit(-1)
}

http.createServer(function(req, res) {
	if (req.url == '/favicon.ico') { return send404(res) }
	if (req.url == '/develop') { return develop(res) }
	if (req.url == '/compile') { return compile(req, res) }
	
	try {
		res.end(loadCompiler().compileFile(file))
	} catch(e) {
		res.end(e.stack ? e.stack : e.message ? e.message : e.toString())
	}
}).listen(port, host)
console.log('Serving', argv._[0], 'on', host+':'+port,'\n')

function send404(res) {
	res.writeHead(404)
	res.end()
}

function develop(res) {
	res.writeHead(200, { 'Content-Type':'text/html' })
	res.end([
		'<form target="output" action="/compile" method="post" style="position:relative;">',
		'	<textarea name="code" style="width:600px;height:100%; float:left;">"Hello world"</textarea>',
		'	<input type="submit" style="position:absolute; top:5px; left:537px;">',
		'</form>',
		'<iframe style="margin:0 0 0 10px; width:600px; height:100%;" name="output" />'
	].join('\n'))
}

function compile(req, res) {
	var code = ''
	req.on('data', function(data) { code += data })
	req.on('end', function() {
		try {
			// code == "code=<URI+encoded+code>"
			var result = loadCompiler().compileCode(decodeURIComponent(code.substr(5).replace(/\+/g, ' ')))
		} catch(e) {
			res.writeHead(500)
			res.end(e.stack)
			return
		}
		res.writeHead(200)
		res.end(result)
	})
}

function loadCompiler() {
	for (var key in require.cache) {
		delete require.cache[key]
	}
	return require('../src/compiler')
}