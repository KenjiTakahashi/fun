intented v0.2.4
+ parser unit tests for if statements and composite expressions
+ first resolver tests
+ first compiler tests
+ moved all js files into /lib

v0.2.3
+ Parser improvements
+ Local expressions are now Local item properties, e.g. let name = "marcus" name.set("marcus westin")
+ Unit testing using nodeunit - a bunch of test cases added for the parser!

v0.2.2
+ File cleanup
+ Upgrade to fin v0.2.11

v0.2.1
+ Fix if/else statement parsing

v0.2.0
+ Publish fun with npm
+ Significantly improved parsing
+ Use latest fin

v0.1.0
+ First versioned version of fun. Lots of stuff works, lots of stuff is hacky, lots of stuff to be done.

TODOs and Roadmap

Get involved - complete a task :)

All expressions should have type:EXPRESSION | INVOCATION | COMPOSITE - each expression should also have a valueType. An alias has the type of what its aliasing. An invocable's signature's argument has the type of what is passed in. A composite has the type of its left operand(?).

--------------

There's ambiguity between
	anInvocation(a + b)
and
	aValue (a + b)

------------

Fix prefixes.
	-3
and
	displayNumber(-2)
work, but 
	for (number in [1,2,3]) { displayNumber(-number) }
does not, nor does
	-number

--------------

- Add valueType to each AST with a value
- No static values!
	let greeting = 'hey'
	greeting
	<button>"shout"</button onclick=handler() { greeting.set('HEY!') }>
- Resolve what a emit value or mutation reference is based on its value type
- Make chat.fun derive global.messages and message.text from the declared classes rather than syntactically
- Add enum type?
	enum State {
		1 happiness
		2 sadness
		3 giddiness
	}
	let aState = new State(1)
	switch(aState) {
		case State.happiness:
		case State.sadness:
	}
	<button>"switch state"</button onclick=handler() { aState.set(State.sadness) }>

- "Write apps"
	1) write an app
	2) write another one
	3) tell the world about them

- "Composite alias values - mouse drag offset"
	X 1) Allow for composite values when parsing a declaration
		let MouseYPlus100 = Mouse.y + 100
	X 2) Allow for composite values in XML attributes
		<div style={ position:'absolute', top:mouseYPlus100, width:100, height:100, background:'red' } />
	X 3) Allow for inline composite values in XML attributes
		<div style={ position:'absolute', top:Mouse.y + 100, width:100, height:100, background:'red' } />

- "Template arguments"
	1) Pass in arguments to template invocations
		X let aTemplate = template(item) { "Hello " item.name }
		X let anotherTemplate = template(name) { "Hello " name }
		aTemplate(@1)
		aTemplate("world")

- "Handler arguments"
	1) Pass in arguments to handler invocations
		let removeFriend = handler(user, friend) {
			user.friends.remove(friend)
		}
		for (friend in user.friends) {
			<button>"remove"</button onclick=removeFriend(user, friend)>
		}


- "thefunlanguage.com"
	X 1) just put something up there
	2) run server in browser for demos
	3) in-browser editor for demos
	4) list engines
	5) technical docs
	6) add just-compile option to fun, so that you can get a static version of webpages that don't use the Global keyword

- "Custom events"
	1) allow for custom events other than XML elements' "on*" events, e.g.
		App.onLoad = handler() { ... }
		// or
		App.onLoad(handler() { ... })
		// or
		App.onLoad.add(handler() { ... })
	2) Implement some, e.g
		Global.onConnect = handler() { ... }
		Global.onDisconnect = handler() { ... }

- "Composite statements"
	X 1) rename parseValueOrAlias to parseValue
	X 2) in parseValue, if parsed number, text or alias
		if next token is operator (e.g. "+")
			parseCompositeStatement(value, operator)
	X 3) <input data=Local.x /> "+" <input data=Local.y /> "=" Local.x + Local.y
	X 4) Grouped composite statements, e.g. (6 * (5 + 4))
	X 5) Allow for composite statements as if/else conditionals
	6) Allow for unary operators !, -, + at the beginning of conditional composite statements

- "Deferred values"
	X 1) Come up with a common way to wait on a series of values before executing a function of compiled code
	2) If all the values are static, don't bother creating a delayed function

- "Type checking"
	X 1) Tags with data should have the dataType attribute <input data=Local.x dataType="number" />
	2) Tags should have custom implementations, that declare what types of data they accept
	3) The data should infer its type of the dataType attribute, and should default to "text"
	4) Template and handler arguments need to have a type associated with them
	5) MIGRATE all type checking from the parser to the resolver. Right now the parser is selective about what type of
		value can be where. The resolver should do all of that checking.

- "Aliased object literal styles"
	1) Allow for saying
		let aStyle = { display:'block' }
		<div style=aStyle />
	2) Enable merging object literals, e.g.
		let aStyle = { display:'block', color:'red' }
		let bStyle = aStyle + { font:'Helvetica', display:'inline' }

- "List/Range literals (and list comprehensions?)"
	See examples/for_loop_literal.fun
	1) Implement list literals (e.g. for (number in [1,2,3]) { ... })
	2) Implement ranges (e.g. for (number in [1..10]) { ... })
	3) Investigate list comprehension - are they useful for fun?

- "Unit testing"
	1) Figure out what unit testing framework to use
	2) unit test parser
	3) unit test resolver
	4) unit test compiler
	5) unit test fin client api
	6) unit tests for the persistence engine api(!)
	7) unit tests for the pubsub engine api(!)

- "Fun Engines"
	1) separate out the persistence and the storage engines from each other
	2) a mysqpl persistence engine
	3) a 0mq pubsub engine
	4) a couchdb persistence engine
	5) a couchdb pubsub engine (changes api)

- "Type-safe item creation"
	1) Whenever an item gets created, ensure that all item properties that are used elsewhere
		are properly initialized, and that no properties that are not used are initialized

BUGS

- "Already subscribed to item property doesn't show up after created"
	Add these lines to the top of chatrooms.fun and start with no data:
		let a = @1
		a.name
	Now create a new room. The room does not show up in the for loop, nor does it show up at the "a.name" hook

- "Relative file imports"
	file imports are relative to the process directory but should be relative to the file's directory
